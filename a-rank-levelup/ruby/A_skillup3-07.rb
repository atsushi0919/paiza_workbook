# へび (paizaランク A 相当)

INPUT1 = <<~"EOS"
  5 5 3 1 3
  .....
  .....
  .....
  .....
  .....
  2 R
  4 R
  6 R
EOS
OUTPUT1 = <<~"EOS"
  .....
  .***.
  .*.*.
  .***.
  .....
EOS

INPUT2 = <<~"EOS"
  18 39 12 1 20
  ........................#...........#..
  .......................................
  .......................................
  .........#........#..#.........#.......
  .............................#.......#.
  .......................................
  ...................................#...
  ......................................#
  ...................#...................
  .......................................
  ....................................#..
  .......................#.....#.....#...
  ..............................#........
  ....#..............#.....#......#......
  .......................................
  .....#.................................
  ...#..................#................
  ......#............................#.#.
  3 R
  8 R
  13 L
  16 R
  19 L
  21 L
  30 R
  32 L
  37 R
  40 L
  42 R
  48 R
  62 R
  73 R
  77 R
  79 R
  83 L
  84 R
  94 R
  99 L
EOS
OUTPUT2 = <<~"EOS"
  ........................#...........#..
  ................*******................
  ................*.....*................
  .........#...****.#..#*........#.......
  .............*........*......#.......#.
  .............*........*................
  .............*........*............#...
  .............*........*...............#
  ...........***.....#..*................
  .******....*..........*................
  .*....*....*..........*.............#..
  .*....*....*..........*#.....#.....#...
  .*....*....*..........*.......#........
  ....#.*....*.......#..*..#......#......
  ......****.*..........*................
  .....#...*.************................
  ...#.....*.*..........#................
  ......#..***.......................#.#.
EOS

INPUT3 = <<~"EOS"
  19 19 2 16 36
  ...................
  ...................
  ...................
  ...................
  ...................
  ...................
  ...................
  ...................
  ...................
  ...................
  ...................
  ...................
  ...................
  ...................
  ...................
  ...................
  .....############..
  ................#..
  .....############..
  2 L
  17 L
  19 L
  33 R
  36 R
  37 L
  38 R
  39 L
  40 R
  41 L
  42 R
  43 L
  44 R
  45 L
  46 R
  47 L
  48 R
  49 L
  50 R
  51 L
  52 R
  53 L
  54 R
  55 L
  56 R
  57 L
  58 R
  59 L
  60 R
  61 L
  62 R
  63 L
  64 R
  65 L
  66 R
  67 L
EOS

class Snake
  def initialize(y, x)
    @y = y
    @x = x
    @d = 0
    @body = [[@y, @x]]
  end

  def add_body(y, x)
    @body << [y, x]
  end

  def body?(y, x)
    @body.include?([y, x])
  end

  def turn(d)
    if d == "L"
      @d = (@d - 1) % 4
    elsif d == "R"
      @d = (@d + 1) % 4
    end
  end

  def next_pos
    y, x = @y, @x
    case @d
    when 0
      y = @y - 1
    when 1
      x = @x + 1
    when 2
      y = @y + 1
    when 3
      x = @x - 1
    end
    [y, x]
  end

  def move_forward
    y, x = next_pos
    add_body(y, x)
    @y, @x = y, x
  end
end

def solve(input_lines)
  # 入力データ受け取り
  input_lines = input_lines.split("\n")
  h, w, sy, sx, n = input_lines.shift.split.map(&:to_i)
  field = input_lines.shift(h).map { |line| line.chars }
  requests = Array.new(100, nil)
  input_lines.shift(n).each do |line|
    t, d = line.split
    requests[t.to_i] = d
  end

  # 初期化
  snake = Snake.new(sy, sx)
  field[sy][sx] = "*"

  # snake と field の更新
  requests.each do |d|
    snake.turn(d) unless d.nil?
    ny, nx = snake.next_pos

    break if ny < 0 || h - 1 < ny
    break if nx < 0 || w - 1 < nx
    break if snake.body?(ny, nx)

    y, x = snake.move_forward
    field[y][x] = "*"
  end

  # 出力
  field.map { |line| line.join }.join("\n") << "\n"
end

puts solve(STDIN.read)

=begin
へび (paizaランク A 相当)
マップ上をへびが移動していきます。
マップの行数 H と列数 W ,障害物を # で移動可能な場所を . で表した H 行 W 列のマップ S_1 ... S_H ,
現在の座標 sy , sx ,方向転換の回数 N が与えられます。
続けて N 回の方向転換をおこなう時刻 t_1 ... t_N, 転換する向き d_1 ... d_N が与えられます。
へびははじめは北を向いています。
へびは進む先のマスに自分の身体や障害物がない時に移動ができます。
時刻 0 から 99 までの間、へびは各時刻に次の行動を最大 100 回繰り返します。

・ 方向転換をおこなう時刻の場合、指定の向きに方向転換したのち １ マス身体を伸ばす。
そうでない時は、今向いている方向に １ マス身体を伸ばす。

時刻が 99 の時の行動を終えるか、移動できなくなった時、移動を終了します。
移動終了時にへびの体のあるマスを ＊ にしたマップを出力してください。
なお、マスの座標系は左上端のマスの座標を ( y , x ) = ( 0 , 0 ) とし、
下方向が y 座標の正の向き、右方向が x 座標の正の向きとします。


入力される値
H W sy sx N        
S_0     
...     
S_(H-1)     
t_1 d_1     
...     
t_N d_N


・ １行目では、盤面の行数 H ,列数 W , 石を置くマスの y , x 座標 である Y , X が与えられます。
・ 続く H 行のうち i 行目 (0 ≦ i < H) には、盤面の i 行目の文字をまとめた文字列 S_i が与えられ、 S_i の j 文字目は、盤面の i 行目の j 列目に書かれている文字を表します。
・ 続く N 行のうち i 行目 (1 ≦ i ≦ N) には、i 回目の方向転換をおこなう時刻 t_i と、方向転換の向き d_i が与えられます。

入力値最終行の末尾に改行が１つ入ります。
文字列は標準入力から渡されます。 標準入力からの値取得方法はこちらをご確認ください
期待する出力
H 行の出力

条件
すべてのテストケースにおいて、以下の条件をみたします。

・ 1 ≦ H, W ≦ 50
・ 1 ≦ N ≦ 100
・ 0 ≦ sy < H
・ 0 ≦ sx < W
・ 1 ≦ t_i ≦ 100
・ t_i < t_(i+1)
・ 時刻は 0 から始まり、99 の時の移動を終えるまでもしくは移動ができなくなるまで移動を繰り返す。
・ S_i は W 文字の文字列
・ マップ上の (sy, sx) のマスは必ず '.'
・ S の各文字は '.' または '#'
・ d_i は、 L, R のいずれかであり、それぞれ 左・右 を意味します。

入力例1
5 5 3 1 3
.....
.....
.....
.....
.....
2 R
4 R
6 R

出力例1
.....
.***.
.*.*.
.***.
.....

入力例2
18 39 12 1 20
........................#...........#..
.......................................
.......................................
.........#........#..#.........#.......
.............................#.......#.
.......................................
...................................#...
......................................#
...................#...................
.......................................
....................................#..
.......................#.....#.....#...
..............................#........
....#..............#.....#......#......
.......................................
.....#.................................
...#..................#................
......#............................#.#.
3 R
8 R
13 L
16 R
19 L
21 L
30 R
32 L
37 R
40 L
42 R
48 R
62 R
73 R
77 R
79 R
83 L
84 R
94 R
99 L

出力例2
........................#...........#..
................*******................
................*.....*................
.........#...****.#..#*........#.......
.............*........*......#.......#.
.............*........*................
.............*........*............#...
.............*........*...............#
...........***.....#..*................
.******....*..........*................
.*....*....*..........*.............#..
.*....*....*..........*#.....#.....#...
.*....*....*..........*.......#........
....#.*....*.......#..*..#......#......
......****.*..........*................
.....#...*.************................
...#.....*.*..........#................
......#..***.......................#.#.
=end
