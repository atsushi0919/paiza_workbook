# アニメーション (paizaランク B 相当)
# https://paiza.jp/works/mondai/bfs_dfs_problems_advanced/bfs_dfs_problems_advanced__animation

INPUT1 = <<"EOS"
3 3 1 1 7
...
##.
...
EOS
OUTPUT1 = <<"EOS"
+..
##.
...
++.
##.
...
+++
##.
...
+++
##+
...
+++
##+
..+
+++
##+
.++
+++
##+
+++
EOS

# 方向設定 x↓ y→
DIR = [[-1, 0], [0, 1], [1, 0], [0, -1]]
# 入力
input_lines = $stdin.read.split("\n")
n, m, x, y, k = input_lines.shift.split.map(&:to_i)
s = input_lines.shift(n).map(&:chars)

# (x, y) からスタート
search_list = [[x - 1, y - 1]]
field_maps = []
# BFS 水の流れをシミュレーション
k.times do
  new_list = []
  while search_list.length > 0
    # 現在の座標を調べる
    cx, cy = search_list.shift
    s[cx][cy] == "." ? s[cx][cy] = "+" : next

    # 隣接マス(nx, ny)を調べる
    DIR.each do |dx, dy|
      nx = cx + dx
      ny = cy + dy

      # 水を流せないならスキップ
      next if nx < 0 || n - 1 < nx || ny < 0 || m - 1 < ny
      next if s[nx][ny] != "."

      # 水を流せるなら座標を追加
      new_list << [nx, ny]
    end
  end
  # マスの状態を記録
  field_maps << s.map { |r| r.join }.join("\n")
  # 次の探索リストをセット
  search_list = new_list
end

# 出力
puts field_maps.join("\n")

=begin
問題にチャレンジして、ユーザー同士で解答を教え合ったり、コードを公開してみよう！

シェア用URL:
問題文のURLをコピーする
 下記の問題をプログラミングしてみよう！
n × m のグリッド上でのアニメーション作成をしてみましょう。
このグリッドは、はじめ空きマス '.' または壁のマス '#' から構成されています。
このグリッド上で、1 コマにつき 1 マスずつすべての隣接するマスに流れ出す水のシミュレーションをおこなうことにします。

具体的には、以下のようなシミュレーションになります。ここで、マス (a, b) は上から a 行目、左から b 列目のマスを表します。
・ 1 コマ目では、マス (x, y) にのみ水が存在する。
・ 2 コマ目以降は、前のコマでマス (i, j), (i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1) のいずれかに水が存在したすべての空きマス (i, j) に水が存在する。

水の存在するマスを '+' として、各コマのシミュレーションのようすを、k コマ目まで順番に出力してください。

▼　下記解答欄にコードを記入してみよう

入力される値
n m x y k
s_1
s_2
...
s_n

・ 1 行目に、グリッドの行数を表す整数 n, グリッドの列数を表す整数 m, 1 コマ目に水が存在するマスの位置を表す整数 x, y, 
シミュレーションのコマ数を表す整数 k が与えられます。
・ 続く n 行では、グリッドの各行の各マスを表す文字列 s_i が改行区切りで与えられます。(1 ≦ i ≦ n)

入力値最終行の末尾に改行が１つ入ります。
文字列は標準入力から渡されます。 標準入力からの値取得方法はこちらをご確認ください
期待する出力
合計 n × k 行出力してください。

1 コマ目から k コマ目までの各コマについて、コマ数の昇順に n × m のグリッドを入力と同じように文字列の形式で n 行で出力してください。水が存在するマスは '+' とすべきことに注意してください。
コマとコマの間に空行を入れる必要はありません。

また、末尾に改行を入れ、余計な文字を含んではいけません。

条件
すべてのテストケースにおいて、以下の条件をみたします。

・ 1 ≦ n, m, k ≦ 100
・ 1 ≦ x ≦ n
・ 1 ≦ y ≦ m
・ n, m, k, x, y は整数
・ s_i は '.' または '#' からなる長さ m の文字列
・ マス (x, y) は空きマスである (s_x_y = '.')

入力例1
3 3 1 1 7
...
##.
...

出力例1
+..
##.
...
++.
##.
...
+++
##.
...
+++
##+
...
+++
##+
..+
+++
##+
.++
+++
##+
+++

=end
