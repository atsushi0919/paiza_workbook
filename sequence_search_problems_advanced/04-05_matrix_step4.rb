# 三次元データ (paizaランク B 相当)
# https://paiza.jp/works/mondai/sequence_search_problems_advanced/sequence_search_problems_advanced__matrix_step4

INPUT1 = <<~"EOS"
  2 3 3 2
  1 1 1
  1 1 1
  2 2 2
  2 2 2
  3 3 3
  3 3 3
EOS
OUTPUT1 = <<~"EOS"
  6
EOS

INPUT2 = <<~"EOS"
  3 3 3 1
  1 2 3
  4 5 1
  2 3 4
  5 1 2
  3 4 5
  1 2 3
  4 5 1
  2 3 4
  5 1 2
EOS
OUTPUT2 = <<~"EOS"
  6
EOS

input_lines = STDIN.read.split("\n")
n, m, h, x = input_lines.shift.split.map(&:to_i)
cuboid = input_lines.each_slice(n).map do |layer|
  layer.map { |line| line.split.map(&:to_i) }
end

puts cuboid.flatten.count(x)

=begin
京子ちゃんは一辺の長さが 1 cm の立方体の石を n \* m \* h 個組み合わせて大きな直方体のオブジェを作っています。
オブジェは高さ h センチメートル、幅 m センチメートル、奥行き n センチメートルで、
下から i 番目、奥から j 番目、左から k 番目の石の色を a_i_j_k とします。
京子ちゃんはちょうどオブジェが完成したときに一つミスに気づいてしまいました。
予定では色 y にするはずだった石をすべて間違えて色 x にしてしまいました。あなたは京子ちゃんの代わりに色 x が使用されている石の個数を答えてください。

▼　下記解答欄にコードを記入してみよう

入力される値
n m h x
a_1_1_1 a_1_1_2 ... a_1_1_m
a_1_2_1 a_1_2_2 ... a_1_2_m
a_1_3_1 a_1_3_2 ... a_1_3_m
...
a_1_n_1 a_1_n_2 ... a_1_n_m
a_2_1_1 a_2_1_2 ... a_2_1_m
a_2_2_1 a_2_2_2 ... a_2_2_m
a_2_3_1 a_2_3_2 ... a_2_3_m
...
a_2_n_1 a_2_n_2 ... a_2_n_m
...
a_h_1_1 a_h_1_2 ... a_h_1_m
a_h_2_1 a_h_2_2 ... a_h_2_m
a_h_3_1 a_h_3_2 ... a_h_3_m
...
a_h_n_1 a_h_n_2 ... a_h_n_m


・ 1 行目に、オブジェの奥行きを表す整数 n 、幅を表す整数 m 、高さを表す整数 h と探したい石の色 x が与えられます。
・ 2 行目から h \* n + 1 行目にかけて、石の色 a_i_j_k が与えられます。
・各石は下の段から上の段へと順に与えられます。各段では n \* m 個の石が与えられます。

入力値最終行の末尾に改行が１つ入ります。
文字列は標準入力から渡されます。 標準入力からの値取得方法はこちらをご確認ください
期待する出力
オブジェに含まれる、色 x が使用されている石の個数を出力してください。

また、末尾に改行を入れ、余計な文字、空行を含んではいけません。

条件
すべてのテストケースにおいて、以下の条件をみたします。

・ 入力はすべて整数
・ 1 ≦ n, m, h ≦ 50
・ 0 ≦ a_i_j_k, x ≦ 255

入力例1
2 3 3 2
1 1 1
1 1 1
2 2 2
2 2 2
3 3 3
3 3 3

出力例1
6

入力例2
3 3 3 1
1 2 3
4 5 1
2 3 4
5 1 2
3 4 5
1 2 3
4 5 1
2 3 4
5 1 2

出力例2
6
=end
