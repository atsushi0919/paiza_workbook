# 問題4: 拡張ダイクストラ - コストを0にできるチケット (paizaランク A 相当)

INPUT1 = <<~"EOS"
  5 12
  0 1 1 1 9 9 9 9 1 1 1 1
  1 1 1 1 1 9 9 9 1 9 9 1
  1 1 1 9 9 9 9 9 1 9 9 1
  9 2 9 9 1 1 1 1 1 9 9 1
  1 1 1 2 1 9 9 9 9 9 9 1
  0
EOS

INPUT2 = <<~"EOS"
  5 12
  0 1 1 1 9 9 9 9 1 1 1 1
  1 1 1 1 1 9 9 9 1 9 9 1
  1 1 1 9 9 9 9 9 1 9 9 1
  9 2 9 9 1 1 1 1 1 9 9 1
  1 1 1 2 1 9 9 9 9 9 9 1
  2
EOS

INPUT3 = <<~"EOS"
  20 20
  0 1 1 1 9 9 9 9 1 1 1 1 3 8 9 1 2 3 4 8
  1 1 1 1 1 9 9 9 1 9 9 1 8 7 9 2 8 7 9 5
  1 1 1 9 9 9 9 9 1 9 9 1 6 2 4 7 8 4 2 1
  9 2 9 9 1 1 1 1 1 9 9 1 7 2 3 9 2 3 3 2
  1 1 1 2 1 9 9 9 9 9 9 1 2 6 8 3 4 7 8 3
  3 1 1 1 9 9 9 9 1 1 1 1 3 8 9 1 2 3 4 8
  1 1 1 1 1 9 9 9 1 9 9 1 8 7 9 2 8 7 9 5
  1 1 1 9 9 9 9 9 1 9 9 1 6 2 4 7 8 4 2 1
  9 2 9 9 1 1 1 1 1 9 9 1 7 2 3 9 2 3 3 2
  1 1 1 2 1 9 9 9 9 9 9 1 2 6 8 3 4 7 8 3
  5 1 1 1 9 9 9 9 1 1 1 1 3 8 9 1 2 3 4 8
  1 1 1 1 1 9 9 9 1 9 9 1 8 7 9 2 8 7 9 5
  1 1 1 9 9 9 9 9 1 9 9 1 6 2 4 7 8 4 2 1
  9 2 9 9 1 1 1 1 1 9 9 1 7 2 3 9 2 3 3 2
  1 1 1 2 1 9 9 9 9 9 9 1 2 6 8 3 4 7 8 3
  2 1 1 1 9 9 9 9 1 1 1 1 3 8 9 1 2 3 4 8
  1 1 1 1 1 9 9 9 1 9 9 1 8 7 9 2 8 7 9 5
  1 1 1 9 9 9 9 9 1 9 9 1 6 2 4 7 8 4 2 1
  9 2 9 9 1 1 1 1 1 9 9 1 7 2 3 9 2 3 3 2
  1 1 1 2 1 9 9 9 9 9 9 1 2 6 8 3 4 7 8 3
  20
EOS
OUTPUT3 = <<~"EOS"
  18
EOS

INPUT5 = <<~"EOS"
  30 30
  43 94 3 9 58 8 12 94 38 88 57 47 0 5 52 89 2 1 48 11 72 62 52 80 94 71 41 100 66 41
  41 73 6 17 22 13 27 37 2 11 65 86 59 95 39 92 48 44 39 76 37 57 58 79 60 15 8 2 80 2
  72 60 52 43 62 8 82 92 98 93 45 51 92 81 77 37 25 50 14 66 5 30 55 7 21 3 45 38 27 53
  11 35 52 64 40 100 67 65 90 54 67 77 11 78 85 85 89 83 89 100 70 0 97 67 23 93 41 78 75 13
  69 46 23 40 44 24 83 78 67 12 30 59 78 63 58 85 2 55 68 72 62 99 94 93 23 78 15 27 69 13
  84 73 88 86 65 4 64 55 27 9 100 99 18 41 61 53 92 2 88 60 55 37 37 48 21 11 77 73 54 44
  47 40 94 16 100 73 13 43 85 94 27 31 28 43 10 64 68 59 13 25 81 28 86 24 37 8 53 61 20 28
  79 2 80 15 68 46 43 40 23 44 21 43 18 100 42 13 26 61 90 86 77 11 11 73 79 61 4 78 91 40
  27 53 95 95 84 54 66 62 32 100 25 28 73 100 6 83 89 80 47 85 9 30 99 77 100 36 38 17 80 92
  99 67 28 42 54 80 97 13 13 98 50 56 39 38 57 85 63 6 11 97 47 54 30 80 54 53 80 19 28 98
  73 11 63 97 1 67 7 36 64 25 51 32 51 73 41 43 84 29 0 44 73 40 75 81 86 97 93 1 11 39
  22 45 7 2 73 54 64 6 72 39 33 37 88 60 70 80 19 45 94 49 82 40 57 50 31 100 7 93 60 72
  97 13 38 39 77 67 90 28 75 42 58 58 45 22 85 60 35 62 15 26 83 50 1 77 52 45 98 46 87 74
  94 39 1 14 60 50 96 14 30 84 48 89 75 69 71 20 84 99 19 58 8 71 75 75 62 28 60 4 38 76
  20 9 64 88 13 5 13 94 92 62 76 49 72 76 86 4 66 44 43 47 73 47 57 68 55 34 27 54 94 99
  37 38 81 46 81 71 89 19 45 94 34 78 5 69 24 53 74 87 53 76 13 85 8 38 53 20 34 58 19 34
  73 14 81 89 52 14 46 25 60 36 77 86 44 64 96 54 70 26 4 88 75 1 47 47 12 12 78 25 7 91
  31 47 17 88 60 0 0 86 10 19 3 89 65 87 90 66 13 78 76 100 60 99 88 49 44 63 19 75 87 43
  33 14 59 59 72 6 72 21 89 12 16 14 10 26 86 11 70 23 69 74 82 90 85 91 31 74 88 56 80 20
  9 97 81 87 57 1 12 35 24 98 35 1 80 26 56 52 60 42 55 3 23 79 37 81 35 2 35 93 5 55
  2 69 82 11 90 78 78 81 1 18 11 92 69 89 100 63 11 48 89 76 61 76 32 10 44 2 67 28 36 9
  21 47 22 68 7 93 51 54 4 95 10 69 98 32 23 73 69 69 9 37 52 3 0 91 37 38 51 32 61 28
  29 16 50 64 91 36 40 5 63 51 29 26 35 3 79 47 79 91 94 3 60 9 49 42 57 52 51 89 92 0
  42 71 95 67 97 92 66 70 82 9 76 78 43 64 39 26 82 27 98 64 91 26 6 13 35 56 77 9 19 77
  92 79 3 82 44 70 73 68 68 80 17 6 37 16 60 40 39 72 25 12 75 58 51 2 20 89 32 41 78 42
  96 16 20 62 82 44 37 99 21 5 52 41 100 25 44 96 75 11 25 59 31 63 76 87 57 76 7 35 9 84
  28 13 79 41 90 87 21 17 63 33 7 26 88 25 79 78 29 24 80 0 56 89 47 69 28 59 82 38 68 64
  79 27 99 74 1 86 42 68 58 96 25 30 0 6 32 54 72 96 28 11 28 80 30 67 19 72 91 3 37 73
  62 61 0 37 35 85 51 14 87 60 1 54 10 10 2 75 85 36 63 100 97 82 76 34 26 67 30 90 52 17
  6 96 98 71 70 38 43 28 2 62 16 70 39 26 62 55 99 15 75 35 73 54 83 85 94 75 49 73 84 15
  19
EOS
OUTPUT5 = <<~"EOS"
  1041
EOS

INPUT6 = <<~"EOS"
  40 20
  95 92 39 25 53 14 19 10 100 9 37 59 89 77 22 76 38 8 44 49
  85 73 97 66 69 76 65 39 36 37 62 100 86 66 66 20 87 52 66 56
  49 46 9 42 0 17 74 3 21 15 69 77 24 5 52 81 94 39 7 44
  9 68 54 7 29 71 27 92 0 15 30 4 25 65 68 42 44 41 36 77
  22 32 97 12 9 4 64 54 90 98 27 34 35 9 3 43 72 8 48 89
  41 12 56 33 49 9 37 33 64 13 84 88 62 80 29 48 26 94 68 15
  38 94 43 70 53 97 39 9 22 56 90 71 79 86 45 92 43 26 28 89
  36 90 73 77 94 52 19 22 38 78 85 12 39 10 52 43 39 3 41 31
  60 78 38 38 15 67 12 42 82 85 51 80 24 5 16 79 85 54 83 19
  58 21 83 73 29 48 44 76 21 40 35 38 60 67 88 28 50 9 50 97
  57 32 39 7 70 57 64 47 4 7 10 31 40 39 68 59 33 41 9 43
  82 13 85 60 1 74 4 57 29 44 64 49 26 92 10 4 97 14 70 70
  12 36 62 93 43 15 55 28 57 66 32 58 76 71 61 16 28 27 21 52
  12 26 68 34 92 24 86 71 28 97 20 28 69 59 13 84 19 63 63 6
  71 0 31 6 82 72 64 43 71 66 15 88 42 18 71 100 17 77 3 31
  95 5 45 100 52 77 49 89 45 35 85 100 64 50 84 65 52 21 17 22
  49 79 3 77 58 94 38 81 4 53 19 56 33 94 83 26 15 81 86 62
  62 76 95 45 57 70 96 61 48 77 94 38 22 26 63 92 63 29 45 63
  75 27 30 59 50 78 43 13 86 71 35 62 42 39 9 6 78 32 53 64
  87 92 71 31 24 26 55 94 35 30 28 53 81 77 15 83 6 32 86 32
  34 29 41 65 74 41 40 23 94 9 66 26 40 91 99 16 28 5 83 64
  28 86 16 61 61 95 25 52 28 71 49 68 13 25 48 90 87 51 4 47
  66 57 52 80 66 15 31 83 87 72 17 19 92 45 94 41 29 42 89 40
  22 16 45 53 82 17 78 23 4 97 40 92 95 35 47 9 41 65 30 94
  77 66 76 19 83 50 46 83 82 70 9 3 44 71 43 78 13 29 86 12
  89 44 50 13 52 35 50 35 25 71 20 78 54 25 39 5 95 19 71 86
  79 60 2 48 64 21 16 99 45 72 1 76 8 10 23 39 14 64 93 0
  31 16 30 10 48 35 84 42 62 22 100 79 69 6 48 46 97 53 42 80
  80 74 24 10 26 63 69 84 29 61 14 87 43 69 95 32 56 15 98 6
  68 58 25 44 25 11 27 69 91 27 43 14 51 73 27 98 4 30 34 33
  79 58 40 13 100 65 77 26 79 71 22 83 83 66 94 23 23 71 74 19
  68 20 57 23 87 70 56 59 52 83 62 70 41 3 65 8 91 11 0 60
  0 54 86 11 61 16 9 7 14 64 55 98 1 97 72 49 23 39 30 98
  92 17 44 63 56 25 49 36 59 76 48 80 11 51 91 38 26 52 1 3
  54 100 25 28 13 70 39 11 28 41 61 51 17 53 68 72 59 78 16 73
  48 4 83 94 4 8 65 18 28 26 14 56 55 7 42 4 54 61 26 96
  10 63 89 75 89 10 19 77 37 74 62 53 74 35 2 6 26 85 7 63
  98 16 43 20 23 81 13 70 72 41 94 14 10 61 4 71 2 33 0 92
  40 21 12 26 91 10 42 87 48 59 96 93 38 93 94 61 78 70 59 11
  25 100 49 97 60 46 85 67 4 40 55 76 70 89 21 72 36 12 70 96
  14
EOS
OUTPUT6 = <<~"EOS"
  1333
EOS

# 優先度付きキュー
class PriorityQueue
  attr_reader :data

  def initialize(array: [], key: 0)
    @data = []
    @key = key
    array.each { |element| insert(element) }
  end

  def insert(element)
    @data << element
    up_heap
  end

  def extract
    target_element = @data.shift
    if size > 1
      @data.unshift @data.pop
      down_heap
    end
    target_element
  end

  def peek
    @data[0]
  end

  def size
    @data.size
  end

  private

  def swap(a, b)
    @data[a], @data[b] = @data[b], @data[a]
  end

  def parent_idx(idx)
    idx / 2 + idx % 2 - 1
  end

  def left_child_idx(idx)
    (idx * 2) + 1
  end

  def right_child_idx(idx)
    (idx * 2) + 2
  end

  def has_child?(idx)
    ((idx * 2) + 1) < @data.size
  end

  def up_heap
    idx = size - 1
    return if idx == 0
    parent_idx = parent_idx(idx)
    while @data[parent_idx][@key] > @data[idx][@key]
      swap(parent_idx, idx)
      return if parent_idx == 0
      idx = parent_idx
      parent_idx = parent_idx(idx)
    end
  end

  def down_heap
    idx = 0
    while (has_child?(idx))
      l_idx = left_child_idx(idx)
      r_idx = right_child_idx(idx)
      if @data[r_idx].nil?
        target_idx = l_idx
      else
        target_idx = @data[l_idx][@key] <= @data[r_idx][@key] ? l_idx : r_idx
      end
      if @data[idx][@key] > @data[target_idx][@key]
        swap(idx, target_idx)
        idx = target_idx
      else
        return
      end
    end
  end
end

class RouteMap
  VY = [-1, 0, 1, 0]
  VX = [0, 1, 0, -1]

  def initialize(size:, start:, goal:, cost_data:, ticket:)
    @size = size
    @start = start
    @goal = goal
    @cost_data = cost_data
    @ticket = ticket
  end

  def moving_cost(sy = @start[:y], sx = @start[:x], gy = @goal[:y], gx = @goal[:x])
    # 無効な引数なら nil を返す
    return unless valid_range?(sy, sx) && valid_range?(gy, gx)

    # 探索初期化
    cost = @cost_data[sy][sx]
    ticket = @ticket
    pqueue = PriorityQueue.new(array: [[sy, sx, cost, ticket]], key: 2)
    close = []

    while pqueue.size > 0
      # コストが一番小さい探索位置を取り出す
      y, x, cost, ticket = pqueue.extract

      # 取り出した位置がゴールだったらcostを返す
      return cost if y == @goal[:y] && x == @goal[:x]

      # スタートから現在位置までの最小コストで確定
      close << [y, x, ticket]

      # 現在地の隣接4マスを調べる
      VY.zip(VX).each do |dy, dx|
        ny = y + dy
        nx = x + dx

        # マップ内で未探索なら探索予定に追加
        if valid_range?(ny, nx)
          if !close.include?([ny, nx, ticket])
            pqueue.insert([ny, nx, @cost_data[ny][nx] + cost, ticket])
          end
          if !close.include?([ny, nx, ticket - 1]) && ticket > 0
            pqueue.insert([ny, nx, cost, ticket - 1])
          end
        end
      end
    end
    # ゴール出来なかったら-1を返す
    return -1
  end

  # マップ内か？
  def valid_range?(y, x)
    (0...@size[:h]).include?(y) && (0...@size[:w]).include?(x)
  end
end

def solve(input_data)
  h, w = input_data.shift.split.map(&:to_i)
  n = input_data.pop.to_i
  cost_data = input_data.each.map do |line|
    line.split.map(&:to_i)
  end

  route_map = RouteMap.new(size: { h: h, w: w },
                           start: { y: 0, x: 0 },
                           goal: { y: h - 1, x: w - 1 },
                           cost_data: cost_data,
                           ticket: n)

  route_map.moving_cost
end

# データ入力

puts solve(INPUT5.split("\n"))
#puts solve(readlines.map(&:chomp))
